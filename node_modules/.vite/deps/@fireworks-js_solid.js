import {
  __publicField,
  createRenderEffect,
  mergeProps,
  onCleanup,
  onMount,
  sharedConfig,
  untrack
} from "./chunk-S4F3QTYZ.js";

// node_modules/fireworks-js/dist/index.es.js
function f(e) {
  return Math.abs(Math.floor(e));
}
function c(e, t) {
  return Math.random() * (t - e) + e;
}
function o(e, t) {
  return Math.floor(c(e, t + 1));
}
function m(e, t, i, s) {
  const n = Math.pow;
  return Math.sqrt(n(e - i, 2) + n(t - s, 2));
}
function x(e, t, i = 1) {
  if (e > 360 || e < 0)
    throw new Error(`Expected hue 0-360 range, got \`${e}\``);
  if (t > 100 || t < 0)
    throw new Error(`Expected lightness 0-100 range, got \`${t}\``);
  if (i > 1 || i < 0)
    throw new Error(`Expected alpha 0-1 range, got \`${i}\``);
  return `hsla(${e}, 100%, ${t}%, ${i})`;
}
var g = (e) => {
  if (typeof e == "object" && e !== null) {
    if (typeof Object.getPrototypeOf == "function") {
      const t = Object.getPrototypeOf(e);
      return t === Object.prototype || t === null;
    }
    return Object.prototype.toString.call(e) === "[object Object]";
  }
  return false;
};
var y = [
  "__proto__",
  "constructor",
  "prototype"
];
var w = (...e) => e.reduce((t, i) => (Object.keys(i).forEach((s) => {
  y.includes(s) || (Array.isArray(t[s]) && Array.isArray(i[s]) ? t[s] = i[s] : g(t[s]) && g(i[s]) ? t[s] = w(t[s], i[s]) : t[s] = i[s]);
}), t), {});
var b = class {
  constructor({
    x: t,
    y: i,
    ctx: s,
    hue: n,
    decay: h2,
    gravity: a,
    friction: r,
    brightness: u,
    flickering: p,
    lineWidth: l,
    explosionLength: d
  }) {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "ctx");
    __publicField(this, "hue");
    __publicField(this, "friction");
    __publicField(this, "gravity");
    __publicField(this, "flickering");
    __publicField(this, "lineWidth");
    __publicField(this, "explosionLength");
    __publicField(this, "angle");
    __publicField(this, "speed");
    __publicField(this, "brightness");
    __publicField(this, "coordinates", []);
    __publicField(this, "decay");
    __publicField(this, "alpha", 1);
    for (this.x = t, this.y = i, this.ctx = s, this.hue = n, this.gravity = a, this.friction = r, this.flickering = p, this.lineWidth = l, this.explosionLength = d, this.angle = c(0, Math.PI * 2), this.speed = o(1, 10), this.brightness = o(u.min, u.max), this.decay = c(h2.min, h2.max); this.explosionLength--; )
      this.coordinates.push([t, i]);
  }
  update(t) {
    this.coordinates.pop(), this.coordinates.unshift([this.x, this.y]), this.speed *= this.friction, this.x += Math.cos(this.angle) * this.speed, this.y += Math.sin(this.angle) * this.speed + this.gravity, this.alpha -= this.decay, this.alpha <= this.decay && t();
  }
  draw() {
    const t = this.coordinates.length - 1;
    this.ctx.beginPath(), this.ctx.lineWidth = this.lineWidth, this.ctx.fillStyle = x(this.hue, this.brightness, this.alpha), this.ctx.moveTo(
      this.coordinates[t][0],
      this.coordinates[t][1]
    ), this.ctx.lineTo(this.x, this.y), this.ctx.strokeStyle = x(
      this.hue,
      this.flickering ? c(0, this.brightness) : this.brightness,
      this.alpha
    ), this.ctx.stroke();
  }
};
var S = class {
  constructor(t, i) {
    __publicField(this, "active", false);
    __publicField(this, "x");
    __publicField(this, "y");
    this.options = t, this.canvas = i, this.pointerDown = this.pointerDown.bind(this), this.pointerUp = this.pointerUp.bind(this), this.pointerMove = this.pointerMove.bind(this);
  }
  get mouseOptions() {
    return this.options.mouse;
  }
  mount() {
    this.canvas.addEventListener("pointerdown", this.pointerDown), this.canvas.addEventListener("pointerup", this.pointerUp), this.canvas.addEventListener("pointermove", this.pointerMove);
  }
  unmount() {
    this.canvas.removeEventListener("pointerdown", this.pointerDown), this.canvas.removeEventListener("pointerup", this.pointerUp), this.canvas.removeEventListener("pointermove", this.pointerMove);
  }
  usePointer(t, i) {
    const { click: s, move: n } = this.mouseOptions;
    (s || n) && (this.x = t.pageX - this.canvas.offsetLeft, this.y = t.pageY - this.canvas.offsetTop, this.active = i);
  }
  pointerDown(t) {
    this.usePointer(t, this.mouseOptions.click);
  }
  pointerUp(t) {
    this.usePointer(t, false);
  }
  pointerMove(t) {
    this.usePointer(t, this.active);
  }
};
var E = class {
  constructor() {
    __publicField(this, "hue");
    __publicField(this, "rocketsPoint");
    __publicField(this, "opacity");
    __publicField(this, "acceleration");
    __publicField(this, "friction");
    __publicField(this, "gravity");
    __publicField(this, "particles");
    __publicField(this, "explosion");
    __publicField(this, "mouse");
    __publicField(this, "boundaries");
    __publicField(this, "sound");
    __publicField(this, "delay");
    __publicField(this, "brightness");
    __publicField(this, "decay");
    __publicField(this, "flickering");
    __publicField(this, "intensity");
    __publicField(this, "traceLength");
    __publicField(this, "traceSpeed");
    __publicField(this, "lineWidth");
    __publicField(this, "lineStyle");
    __publicField(this, "autoresize");
    this.autoresize = true, this.lineStyle = "round", this.flickering = 50, this.traceLength = 3, this.traceSpeed = 10, this.intensity = 30, this.explosion = 5, this.gravity = 1.5, this.opacity = 0.5, this.particles = 50, this.friction = 0.95, this.acceleration = 1.05, this.hue = {
      min: 0,
      max: 360
    }, this.rocketsPoint = {
      min: 50,
      max: 50
    }, this.lineWidth = {
      explosion: {
        min: 1,
        max: 3
      },
      trace: {
        min: 1,
        max: 2
      }
    }, this.mouse = {
      click: false,
      move: false,
      max: 1
    }, this.delay = {
      min: 30,
      max: 60
    }, this.brightness = {
      min: 50,
      max: 80
    }, this.decay = {
      min: 0.015,
      max: 0.03
    }, this.sound = {
      enabled: false,
      files: [
        "explosion0.mp3",
        "explosion1.mp3",
        "explosion2.mp3"
      ],
      volume: {
        min: 4,
        max: 8
      }
    }, this.boundaries = {
      height: 0,
      width: 0,
      x: 50,
      y: 50
    };
  }
  update(t) {
    Object.assign(this, w(this, t));
  }
};
var O = class {
  constructor(t, i) {
    __publicField(this, "tick", 0);
    __publicField(this, "rafId", 0);
    __publicField(this, "fps", 60);
    __publicField(this, "tolerance", 0.1);
    __publicField(this, "now");
    this.options = t, this.render = i;
  }
  mount() {
    this.now = performance.now();
    const t = 1e3 / this.fps, i = (s) => {
      this.rafId = requestAnimationFrame(i);
      const n = s - this.now;
      n >= t - this.tolerance && (this.render(), this.now = s - n % t, this.tick += n * (this.options.intensity * Math.PI) / 1e3);
    };
    this.rafId = requestAnimationFrame(i);
  }
  unmount() {
    cancelAnimationFrame(this.rafId);
  }
};
var L = class {
  constructor(t, i) {
    this.options = t, this.updateSize = i, this.handleResize = this.handleResize.bind(this);
  }
  mount() {
    this.options.autoresize && window.addEventListener("resize", this.handleResize);
  }
  unmount() {
    this.options.autoresize && window.removeEventListener("resize", this.handleResize);
  }
  handleResize() {
    this.updateSize();
  }
};
var z = class {
  constructor(t) {
    __publicField(this, "buffers", []);
    __publicField(this, "audioContext");
    __publicField(this, "onInit", false);
    this.options = t, this.init();
  }
  get isEnabled() {
    return this.options.sound.enabled;
  }
  get soundOptions() {
    return this.options.sound;
  }
  init() {
    !this.onInit && this.isEnabled && (this.onInit = true, this.audioContext = new (window.AudioContext || window.webkitAudioContext)(), this.loadSounds());
  }
  async loadSounds() {
    for (const t of this.soundOptions.files) {
      const i = await (await fetch(t)).arrayBuffer();
      this.audioContext.decodeAudioData(i).then((s) => {
        this.buffers.push(s);
      }).catch((s) => {
        throw s;
      });
    }
  }
  play() {
    if (this.isEnabled && this.buffers.length) {
      const t = this.audioContext.createBufferSource(), i = this.buffers[o(0, this.buffers.length - 1)], s = this.audioContext.createGain();
      t.buffer = i, s.gain.value = c(
        this.soundOptions.volume.min / 100,
        this.soundOptions.volume.max / 100
      ), s.connect(this.audioContext.destination), t.connect(s), t.start(0);
    } else
      this.init();
  }
};
var M = class {
  constructor({
    x: t,
    y: i,
    dx: s,
    dy: n,
    ctx: h2,
    hue: a,
    speed: r,
    traceLength: u,
    acceleration: p
  }) {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "sx");
    __publicField(this, "sy");
    __publicField(this, "dx");
    __publicField(this, "dy");
    __publicField(this, "ctx");
    __publicField(this, "hue");
    __publicField(this, "speed");
    __publicField(this, "acceleration");
    __publicField(this, "traceLength");
    __publicField(this, "totalDistance");
    __publicField(this, "angle");
    __publicField(this, "brightness");
    __publicField(this, "coordinates", []);
    __publicField(this, "currentDistance", 0);
    for (this.x = t, this.y = i, this.sx = t, this.sy = i, this.dx = s, this.dy = n, this.ctx = h2, this.hue = a, this.speed = r, this.traceLength = u, this.acceleration = p, this.totalDistance = m(t, i, s, n), this.angle = Math.atan2(n - i, s - t), this.brightness = o(50, 70); this.traceLength--; )
      this.coordinates.push([t, i]);
  }
  update(t) {
    this.coordinates.pop(), this.coordinates.unshift([this.x, this.y]), this.speed *= this.acceleration;
    const i = Math.cos(this.angle) * this.speed, s = Math.sin(this.angle) * this.speed;
    this.currentDistance = m(
      this.sx,
      this.sy,
      this.x + i,
      this.y + s
    ), this.currentDistance >= this.totalDistance ? t(this.dx, this.dy, this.hue) : (this.x += i, this.y += s);
  }
  draw() {
    const t = this.coordinates.length - 1;
    this.ctx.beginPath(), this.ctx.moveTo(
      this.coordinates[t][0],
      this.coordinates[t][1]
    ), this.ctx.lineTo(this.x, this.y), this.ctx.strokeStyle = x(this.hue, this.brightness), this.ctx.stroke();
  }
};
var C = class {
  constructor(t, i = {}) {
    __publicField(this, "target");
    __publicField(this, "container");
    __publicField(this, "canvas");
    __publicField(this, "ctx");
    __publicField(this, "width");
    __publicField(this, "height");
    __publicField(this, "traces", []);
    __publicField(this, "explosions", []);
    __publicField(this, "waitStopRaf");
    __publicField(this, "running", false);
    __publicField(this, "opts");
    __publicField(this, "sound");
    __publicField(this, "resize");
    __publicField(this, "mouse");
    __publicField(this, "raf");
    this.target = t, this.container = t, this.opts = new E(), this.updateOptions(i), this.createCanvas(this.target), this.sound = new z(this.opts), this.resize = new L(this.opts, this.updateSize.bind(this)), this.mouse = new S(this.opts, this.canvas), this.raf = new O(this.opts, this.render.bind(this));
  }
  get isRunning() {
    return this.running;
  }
  get version() {
    return "2.10.1";
  }
  get currentOptions() {
    return this.opts;
  }
  start() {
    this.running || (this.canvas.isConnected || this.createCanvas(this.target), this.running = true, this.resize.mount(), this.mouse.mount(), this.raf.mount());
  }
  stop(t = false) {
    !this.running || (this.running = false, this.resize.unmount(), this.mouse.unmount(), this.raf.unmount(), this.clear(), t && this.canvas.remove());
  }
  async waitStop(t) {
    if (!!this.running)
      return new Promise((i) => {
        this.waitStopRaf = () => {
          !this.waitStopRaf || (requestAnimationFrame(this.waitStopRaf), !this.traces.length && !this.explosions.length && (this.waitStopRaf = null, this.stop(t), i()));
        }, this.waitStopRaf();
      });
  }
  pause() {
    this.running = !this.running, this.running ? this.raf.mount() : this.raf.unmount();
  }
  clear() {
    !this.ctx || (this.traces = [], this.explosions = [], this.ctx.clearRect(0, 0, this.width, this.height));
  }
  launch(t = 1) {
    for (let i = 0; i < t; i++)
      this.createTrace();
    this.waitStopRaf || (this.start(), this.waitStop());
  }
  updateOptions(t) {
    this.opts.update(t);
  }
  updateSize({
    width: t = this.container.clientWidth,
    height: i = this.container.clientHeight
  } = {}) {
    this.width = t, this.height = i, this.canvas.width = t, this.canvas.height = i, this.updateBoundaries({
      ...this.opts.boundaries,
      width: t,
      height: i
    });
  }
  updateBoundaries(t) {
    this.updateOptions({ boundaries: t });
  }
  createCanvas(t) {
    t instanceof HTMLCanvasElement ? (t.isConnected || document.body.append(t), this.canvas = t) : (this.canvas = document.createElement("canvas"), this.container.append(this.canvas)), this.ctx = this.canvas.getContext("2d"), this.updateSize();
  }
  render() {
    if (!this.ctx || !this.running)
      return;
    const { opacity: t, lineStyle: i, lineWidth: s } = this.opts;
    this.ctx.globalCompositeOperation = "destination-out", this.ctx.fillStyle = `rgba(0, 0, 0, ${t})`, this.ctx.fillRect(0, 0, this.width, this.height), this.ctx.globalCompositeOperation = "lighter", this.ctx.lineCap = i, this.ctx.lineJoin = "round", this.ctx.lineWidth = c(s.trace.min, s.trace.max), this.initTrace(), this.drawTrace(), this.drawExplosion();
  }
  createTrace() {
    const {
      hue: t,
      rocketsPoint: i,
      boundaries: s,
      traceLength: n,
      traceSpeed: h2,
      acceleration: a,
      mouse: r
    } = this.opts;
    this.traces.push(
      new M({
        x: this.width * o(i.min, i.max) / 100,
        y: this.height,
        dx: this.mouse.x && r.move || this.mouse.active ? this.mouse.x : o(s.x, s.width - s.x * 2),
        dy: this.mouse.y && r.move || this.mouse.active ? this.mouse.y : o(s.y, s.height * 0.5),
        ctx: this.ctx,
        hue: o(t.min, t.max),
        speed: h2,
        acceleration: a,
        traceLength: f(n)
      })
    );
  }
  initTrace() {
    if (this.waitStopRaf)
      return;
    const { delay: t, mouse: i } = this.opts;
    (this.raf.tick > o(t.min, t.max) || this.mouse.active && i.max > this.traces.length) && (this.createTrace(), this.raf.tick = 0);
  }
  drawTrace() {
    let t = this.traces.length;
    for (; t--; )
      this.traces[t].draw(), this.traces[t].update((i, s, n) => {
        this.initExplosion(i, s, n), this.sound.play(), this.traces.splice(t, 1);
      });
  }
  initExplosion(t, i, s) {
    const {
      particles: n,
      flickering: h2,
      lineWidth: a,
      explosion: r,
      brightness: u,
      friction: p,
      gravity: l,
      decay: d
    } = this.opts;
    let v = f(n);
    for (; v--; )
      this.explosions.push(
        new b({
          x: t,
          y: i,
          ctx: this.ctx,
          hue: s,
          friction: p,
          gravity: l,
          flickering: o(0, 100) <= h2,
          lineWidth: c(
            a.explosion.min,
            a.explosion.max
          ),
          explosionLength: f(r),
          brightness: u,
          decay: d
        })
      );
  }
  drawExplosion() {
    let t = this.explosions.length;
    for (; t--; )
      this.explosions[t].draw(), this.explosions[t].update(() => {
        this.explosions.splice(t, 1);
      });
  }
};

// node_modules/@fireworks-js/solid/dist/index.es.js
var j = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "controls", "default", "disabled", "formnovalidate", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "seamless", "selected"];
var B = /* @__PURE__ */ new Set(["className", "value", "readOnly", "formNoValidate", "isMap", "noModule", "playsInline", ...j]);
var k = /* @__PURE__ */ new Set(["innerHTML", "textContent", "innerText", "children"]);
var _ = Object.assign(/* @__PURE__ */ Object.create(null), {
  className: "class",
  htmlFor: "for"
});
var x2 = Object.assign(/* @__PURE__ */ Object.create(null), {
  class: "className",
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly"
});
var D = /* @__PURE__ */ new Set(["beforeinput", "click", "dblclick", "contextmenu", "focusin", "focusout", "input", "keydown", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "pointerdown", "pointermove", "pointerout", "pointerover", "pointerup", "touchend", "touchmove", "touchstart"]);
var F = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
};
function q(i, t, e) {
  let s = e.length, o2 = t.length, l = s, f2 = 0, n = 0, r = t[o2 - 1].nextSibling, c2 = null;
  for (; f2 < o2 || n < l; ) {
    if (t[f2] === e[n]) {
      f2++, n++;
      continue;
    }
    for (; t[o2 - 1] === e[l - 1]; )
      o2--, l--;
    if (o2 === f2) {
      const d = l < s ? n ? e[n - 1].nextSibling : e[l - n] : r;
      for (; n < l; )
        i.insertBefore(e[n++], d);
    } else if (l === n)
      for (; f2 < o2; )
        (!c2 || !c2.has(t[f2])) && t[f2].remove(), f2++;
    else if (t[f2] === e[l - 1] && e[n] === t[o2 - 1]) {
      const d = t[--o2].nextSibling;
      i.insertBefore(e[n++], t[f2++].nextSibling), i.insertBefore(e[--l], d), t[o2] = e[l];
    } else {
      if (!c2) {
        c2 = /* @__PURE__ */ new Map();
        let u = n;
        for (; u < l; )
          c2.set(e[u], u++);
      }
      const d = c2.get(t[f2]);
      if (d != null)
        if (n < d && d < l) {
          let u = f2, m2 = 1, A;
          for (; ++u < o2 && u < l && !((A = c2.get(t[u])) == null || A !== d + m2); )
            m2++;
          if (m2 > d - n) {
            const $ = t[f2];
            for (; n < d; )
              i.insertBefore(e[n++], $);
          } else
            i.replaceChild(e[n++], t[f2++]);
        } else
          f2++;
      else
        t[f2++].remove();
    }
  }
}
var N = "_$DX_DELEGATE";
function H(i, t, e) {
  const s = document.createElement("template");
  s.innerHTML = i;
  let o2 = s.content.firstChild;
  return e && (o2 = o2.firstChild), o2;
}
function I(i, t = window.document) {
  const e = t[N] || (t[N] = /* @__PURE__ */ new Set());
  for (let s = 0, o2 = i.length; s < o2; s++) {
    const l = i[s];
    e.has(l) || (e.add(l), t.addEventListener(l, Z));
  }
}
function L2(i, t, e) {
  e == null ? i.removeAttribute(t) : i.setAttribute(t, e);
}
function K(i, t, e, s) {
  s == null ? i.removeAttributeNS(t, e) : i.setAttributeNS(t, e, s);
}
function V(i, t) {
  t == null ? i.removeAttribute("class") : i.className = t;
}
function X(i, t, e, s) {
  if (s)
    Array.isArray(e) ? (i[`$$${t}`] = e[0], i[`$$${t}Data`] = e[1]) : i[`$$${t}`] = e;
  else if (Array.isArray(e)) {
    const o2 = e[0];
    i.addEventListener(t, e[0] = (l) => o2.call(i, e[1], l));
  } else
    i.addEventListener(t, e);
}
function U(i, t, e = {}) {
  const s = Object.keys(t || {}), o2 = Object.keys(e);
  let l, f2;
  for (l = 0, f2 = o2.length; l < f2; l++) {
    const n = o2[l];
    !n || n === "undefined" || t[n] || (E2(i, n, false), delete e[n]);
  }
  for (l = 0, f2 = s.length; l < f2; l++) {
    const n = s[l], r = !!t[n];
    !n || n === "undefined" || e[n] === r || !r || (E2(i, n, true), e[n] = r);
  }
  return e;
}
function G(i, t, e) {
  if (!t)
    return e ? L2(i, "style") : t;
  const s = i.style;
  if (typeof t == "string")
    return s.cssText = t;
  typeof e == "string" && (s.cssText = e = void 0), e || (e = {}), t || (t = {});
  let o2, l;
  for (l in e)
    t[l] == null && s.removeProperty(l), delete e[l];
  for (l in t)
    o2 = t[l], o2 !== e[l] && (s.setProperty(l, o2), e[l] = o2);
  return e;
}
function J(i, t = {}, e, s) {
  const o2 = {};
  return s || createRenderEffect(() => o2.children = g2(i, t.children, o2.children)), createRenderEffect(() => t.ref && t.ref(i)), createRenderEffect(() => W(i, t, e, true, o2, true)), o2;
}
function Q(i, t, e) {
  return untrack(() => i(t, e));
}
function R(i, t, e, s) {
  if (e !== void 0 && !s && (s = []), typeof t != "function")
    return g2(i, t, s, e);
  createRenderEffect((o2) => g2(i, t(), o2, e), s);
}
function W(i, t, e, s, o2 = {}, l = false) {
  t || (t = {});
  for (const f2 in o2)
    if (!(f2 in t)) {
      if (f2 === "children")
        continue;
      o2[f2] = b2(i, f2, null, o2[f2], e, l);
    }
  for (const f2 in t) {
    if (f2 === "children") {
      s || g2(i, t.children);
      continue;
    }
    const n = t[f2];
    o2[f2] = b2(i, f2, n, o2[f2], e, l);
  }
}
function Y(i) {
  return i.toLowerCase().replace(/-([a-z])/g, (t, e) => e.toUpperCase());
}
function E2(i, t, e) {
  const s = t.trim().split(/\s+/);
  for (let o2 = 0, l = s.length; o2 < l; o2++)
    i.classList.toggle(s[o2], e);
}
function b2(i, t, e, s, o2, l) {
  let f2, n, r;
  if (t === "style")
    return G(i, e, s);
  if (t === "classList")
    return U(i, e, s);
  if (e === s)
    return s;
  if (t === "ref")
    l || e(i);
  else if (t.slice(0, 3) === "on:") {
    const c2 = t.slice(3);
    s && i.removeEventListener(c2, s), e && i.addEventListener(c2, e);
  } else if (t.slice(0, 10) === "oncapture:") {
    const c2 = t.slice(10);
    s && i.removeEventListener(c2, s, true), e && i.addEventListener(c2, e, true);
  } else if (t.slice(0, 2) === "on") {
    const c2 = t.slice(2).toLowerCase(), d = D.has(c2);
    if (!d && s) {
      const u = Array.isArray(s) ? s[0] : s;
      i.removeEventListener(c2, u);
    }
    (d || e) && (X(i, c2, e, d), d && I([c2]));
  } else if ((r = k.has(t)) || !o2 && (x2[t] || (n = B.has(t))) || (f2 = i.nodeName.includes("-")))
    t === "class" || t === "className" ? V(i, e) : f2 && !n && !r ? i[Y(t)] = e : i[x2[t] || t] = e;
  else {
    const c2 = o2 && t.indexOf(":") > -1 && F[t.split(":")[0]];
    c2 ? K(i, c2, t, e) : L2(i, _[t] || t, e);
  }
  return e;
}
function Z(i) {
  const t = `$$${i.type}`;
  let e = i.composedPath && i.composedPath()[0] || i.target;
  for (i.target !== e && Object.defineProperty(i, "target", {
    configurable: true,
    value: e
  }), Object.defineProperty(i, "currentTarget", {
    configurable: true,
    get() {
      return e || document;
    }
  }), sharedConfig.registry && !sharedConfig.done && (sharedConfig.done = true, document.querySelectorAll("[id^=pl-]").forEach((s) => s.remove())); e !== null; ) {
    const s = e[t];
    if (s && !e.disabled) {
      const o2 = e[`${t}Data`];
      if (o2 !== void 0 ? s.call(e, o2, i) : s.call(e, i), i.cancelBubble)
        return;
    }
    e = e.host && e.host !== e && e.host instanceof Node ? e.host : e.parentNode;
  }
}
function g2(i, t, e, s, o2) {
  for (sharedConfig.context && !e && (e = [...i.childNodes]); typeof e == "function"; )
    e = e();
  if (t === e)
    return e;
  const l = typeof t, f2 = s !== void 0;
  if (i = f2 && e[0] && e[0].parentNode || i, l === "string" || l === "number") {
    if (sharedConfig.context)
      return e;
    if (l === "number" && (t = t.toString()), f2) {
      let n = e[0];
      n && n.nodeType === 3 ? n.data = t : n = document.createTextNode(t), e = h(i, e, s, n);
    } else
      e !== "" && typeof e == "string" ? e = i.firstChild.data = t : e = i.textContent = t;
  } else if (t == null || l === "boolean") {
    if (sharedConfig.context)
      return e;
    e = h(i, e, s);
  } else {
    if (l === "function")
      return createRenderEffect(() => {
        let n = t();
        for (; typeof n == "function"; )
          n = n();
        e = g2(i, n, e, s);
      }), () => e;
    if (Array.isArray(t)) {
      const n = [], r = e && Array.isArray(e);
      if (w2(n, t, e, o2))
        return createRenderEffect(() => e = g2(i, n, e, s, true)), () => e;
      if (sharedConfig.context) {
        if (!n.length)
          return e;
        for (let c2 = 0; c2 < n.length; c2++)
          if (n[c2].parentNode)
            return e = n;
      }
      if (n.length === 0) {
        if (e = h(i, e, s), f2)
          return e;
      } else
        r ? e.length === 0 ? C2(i, n, s) : q(i, e, n) : (e && h(i), C2(i, n));
      e = n;
    } else if (t instanceof Node) {
      if (sharedConfig.context && t.parentNode)
        return e = f2 ? [t] : t;
      if (Array.isArray(e)) {
        if (f2)
          return e = h(i, e, s, t);
        h(i, e, null, t);
      } else
        e == null || e === "" || !i.firstChild ? i.appendChild(t) : i.replaceChild(t, i.firstChild);
      e = t;
    }
  }
  return e;
}
function w2(i, t, e, s) {
  let o2 = false;
  for (let l = 0, f2 = t.length; l < f2; l++) {
    let n = t[l], r = e && e[l];
    if (n instanceof Node)
      i.push(n);
    else if (!(n == null || n === true || n === false))
      if (Array.isArray(n))
        o2 = w2(i, n, r) || o2;
      else if (typeof n == "function")
        if (s) {
          for (; typeof n == "function"; )
            n = n();
          o2 = w2(i, Array.isArray(n) ? n : [n], Array.isArray(r) ? r : [r]) || o2;
        } else
          i.push(n), o2 = true;
      else {
        const c2 = String(n);
        r && r.nodeType === 3 && r.data === c2 ? i.push(r) : i.push(document.createTextNode(c2));
      }
  }
  return o2;
}
function C2(i, t, e = null) {
  for (let s = 0, o2 = t.length; s < o2; s++)
    i.insertBefore(t[s], e);
}
function h(i, t, e, s) {
  if (e === void 0)
    return i.textContent = "";
  const o2 = s || document.createTextNode("");
  if (t.length) {
    let l = false;
    for (let f2 = t.length - 1; f2 >= 0; f2--) {
      const n = t[f2];
      if (o2 !== n) {
        const r = n.parentNode === i;
        !l && !f2 ? r ? i.replaceChild(o2, n) : i.insertBefore(o2, e) : r && n.remove();
      } else
        l = true;
    }
  } else
    i.insertBefore(o2, e);
  return [o2];
}
var z2 = H("<div></div>");
var ee = (i) => {
  const {
    autostart: t,
    options: e,
    children: s,
    ref: o2,
    ...l
  } = mergeProps({
    autostart: true
  }, i);
  let f2, n;
  return onMount(() => {
    n = new C(f2, e), t && n.start(), o2 && o2(n), onCleanup(() => {
      n.stop();
    });
  }), (() => {
    const r = z2.cloneNode(true), c2 = f2;
    return typeof c2 == "function" ? Q(c2, r) : f2 = r, J(r, l, false, true), R(r, s), r;
  })();
};
export {
  ee as Fireworks,
  ee as default
};
//# sourceMappingURL=@fireworks-js_solid.js.map
