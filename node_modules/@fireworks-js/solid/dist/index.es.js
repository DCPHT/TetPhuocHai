/**
 * name: @fireworks-js/solid
 * version: 2.10.1
 * author: Vitalij Ryndin (https://crashmax.ru)
 * homepage: https://fireworks.js.org
 * license MIT
 */
import { createRenderEffect as y, untrack as S, sharedConfig as a, mergeProps as T, onMount as P, onCleanup as O } from "solid-js";
import { Fireworks as M } from "fireworks-js";
const j = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "controls", "default", "disabled", "formnovalidate", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "seamless", "selected"], B = /* @__PURE__ */ new Set(["className", "value", "readOnly", "formNoValidate", "isMap", "noModule", "playsInline", ...j]), k = /* @__PURE__ */ new Set(["innerHTML", "textContent", "innerText", "children"]), _ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  className: "class",
  htmlFor: "for"
}), x = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  class: "className",
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly"
}), D = /* @__PURE__ */ new Set(["beforeinput", "click", "dblclick", "contextmenu", "focusin", "focusout", "input", "keydown", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "pointerdown", "pointermove", "pointerout", "pointerover", "pointerup", "touchend", "touchmove", "touchstart"]), F = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
};
function q(i, t, e) {
  let s = e.length, o = t.length, l = s, f = 0, n = 0, r = t[o - 1].nextSibling, c = null;
  for (; f < o || n < l; ) {
    if (t[f] === e[n]) {
      f++, n++;
      continue;
    }
    for (; t[o - 1] === e[l - 1]; )
      o--, l--;
    if (o === f) {
      const d = l < s ? n ? e[n - 1].nextSibling : e[l - n] : r;
      for (; n < l; )
        i.insertBefore(e[n++], d);
    } else if (l === n)
      for (; f < o; )
        (!c || !c.has(t[f])) && t[f].remove(), f++;
    else if (t[f] === e[l - 1] && e[n] === t[o - 1]) {
      const d = t[--o].nextSibling;
      i.insertBefore(e[n++], t[f++].nextSibling), i.insertBefore(e[--l], d), t[o] = e[l];
    } else {
      if (!c) {
        c = /* @__PURE__ */ new Map();
        let u = n;
        for (; u < l; )
          c.set(e[u], u++);
      }
      const d = c.get(t[f]);
      if (d != null)
        if (n < d && d < l) {
          let u = f, m = 1, A;
          for (; ++u < o && u < l && !((A = c.get(t[u])) == null || A !== d + m); )
            m++;
          if (m > d - n) {
            const $ = t[f];
            for (; n < d; )
              i.insertBefore(e[n++], $);
          } else
            i.replaceChild(e[n++], t[f++]);
        } else
          f++;
      else
        t[f++].remove();
    }
  }
}
const N = "_$DX_DELEGATE";
function H(i, t, e) {
  const s = document.createElement("template");
  s.innerHTML = i;
  let o = s.content.firstChild;
  return e && (o = o.firstChild), o;
}
function I(i, t = window.document) {
  const e = t[N] || (t[N] = /* @__PURE__ */ new Set());
  for (let s = 0, o = i.length; s < o; s++) {
    const l = i[s];
    e.has(l) || (e.add(l), t.addEventListener(l, Z));
  }
}
function L(i, t, e) {
  e == null ? i.removeAttribute(t) : i.setAttribute(t, e);
}
function K(i, t, e, s) {
  s == null ? i.removeAttributeNS(t, e) : i.setAttributeNS(t, e, s);
}
function V(i, t) {
  t == null ? i.removeAttribute("class") : i.className = t;
}
function X(i, t, e, s) {
  if (s)
    Array.isArray(e) ? (i[`$$${t}`] = e[0], i[`$$${t}Data`] = e[1]) : i[`$$${t}`] = e;
  else if (Array.isArray(e)) {
    const o = e[0];
    i.addEventListener(t, e[0] = (l) => o.call(i, e[1], l));
  } else
    i.addEventListener(t, e);
}
function U(i, t, e = {}) {
  const s = Object.keys(t || {}), o = Object.keys(e);
  let l, f;
  for (l = 0, f = o.length; l < f; l++) {
    const n = o[l];
    !n || n === "undefined" || t[n] || (E(i, n, !1), delete e[n]);
  }
  for (l = 0, f = s.length; l < f; l++) {
    const n = s[l], r = !!t[n];
    !n || n === "undefined" || e[n] === r || !r || (E(i, n, !0), e[n] = r);
  }
  return e;
}
function G(i, t, e) {
  if (!t)
    return e ? L(i, "style") : t;
  const s = i.style;
  if (typeof t == "string")
    return s.cssText = t;
  typeof e == "string" && (s.cssText = e = void 0), e || (e = {}), t || (t = {});
  let o, l;
  for (l in e)
    t[l] == null && s.removeProperty(l), delete e[l];
  for (l in t)
    o = t[l], o !== e[l] && (s.setProperty(l, o), e[l] = o);
  return e;
}
function J(i, t = {}, e, s) {
  const o = {};
  return s || y(() => o.children = g(i, t.children, o.children)), y(() => t.ref && t.ref(i)), y(() => W(i, t, e, !0, o, !0)), o;
}
function Q(i, t, e) {
  return S(() => i(t, e));
}
function R(i, t, e, s) {
  if (e !== void 0 && !s && (s = []), typeof t != "function")
    return g(i, t, s, e);
  y((o) => g(i, t(), o, e), s);
}
function W(i, t, e, s, o = {}, l = !1) {
  t || (t = {});
  for (const f in o)
    if (!(f in t)) {
      if (f === "children")
        continue;
      o[f] = b(i, f, null, o[f], e, l);
    }
  for (const f in t) {
    if (f === "children") {
      s || g(i, t.children);
      continue;
    }
    const n = t[f];
    o[f] = b(i, f, n, o[f], e, l);
  }
}
function Y(i) {
  return i.toLowerCase().replace(/-([a-z])/g, (t, e) => e.toUpperCase());
}
function E(i, t, e) {
  const s = t.trim().split(/\s+/);
  for (let o = 0, l = s.length; o < l; o++)
    i.classList.toggle(s[o], e);
}
function b(i, t, e, s, o, l) {
  let f, n, r;
  if (t === "style")
    return G(i, e, s);
  if (t === "classList")
    return U(i, e, s);
  if (e === s)
    return s;
  if (t === "ref")
    l || e(i);
  else if (t.slice(0, 3) === "on:") {
    const c = t.slice(3);
    s && i.removeEventListener(c, s), e && i.addEventListener(c, e);
  } else if (t.slice(0, 10) === "oncapture:") {
    const c = t.slice(10);
    s && i.removeEventListener(c, s, !0), e && i.addEventListener(c, e, !0);
  } else if (t.slice(0, 2) === "on") {
    const c = t.slice(2).toLowerCase(), d = D.has(c);
    if (!d && s) {
      const u = Array.isArray(s) ? s[0] : s;
      i.removeEventListener(c, u);
    }
    (d || e) && (X(i, c, e, d), d && I([c]));
  } else if ((r = k.has(t)) || !o && (x[t] || (n = B.has(t))) || (f = i.nodeName.includes("-")))
    t === "class" || t === "className" ? V(i, e) : f && !n && !r ? i[Y(t)] = e : i[x[t] || t] = e;
  else {
    const c = o && t.indexOf(":") > -1 && F[t.split(":")[0]];
    c ? K(i, c, t, e) : L(i, _[t] || t, e);
  }
  return e;
}
function Z(i) {
  const t = `$$${i.type}`;
  let e = i.composedPath && i.composedPath()[0] || i.target;
  for (i.target !== e && Object.defineProperty(i, "target", {
    configurable: !0,
    value: e
  }), Object.defineProperty(i, "currentTarget", {
    configurable: !0,
    get() {
      return e || document;
    }
  }), a.registry && !a.done && (a.done = !0, document.querySelectorAll("[id^=pl-]").forEach((s) => s.remove())); e !== null; ) {
    const s = e[t];
    if (s && !e.disabled) {
      const o = e[`${t}Data`];
      if (o !== void 0 ? s.call(e, o, i) : s.call(e, i), i.cancelBubble)
        return;
    }
    e = e.host && e.host !== e && e.host instanceof Node ? e.host : e.parentNode;
  }
}
function g(i, t, e, s, o) {
  for (a.context && !e && (e = [...i.childNodes]); typeof e == "function"; )
    e = e();
  if (t === e)
    return e;
  const l = typeof t, f = s !== void 0;
  if (i = f && e[0] && e[0].parentNode || i, l === "string" || l === "number") {
    if (a.context)
      return e;
    if (l === "number" && (t = t.toString()), f) {
      let n = e[0];
      n && n.nodeType === 3 ? n.data = t : n = document.createTextNode(t), e = h(i, e, s, n);
    } else
      e !== "" && typeof e == "string" ? e = i.firstChild.data = t : e = i.textContent = t;
  } else if (t == null || l === "boolean") {
    if (a.context)
      return e;
    e = h(i, e, s);
  } else {
    if (l === "function")
      return y(() => {
        let n = t();
        for (; typeof n == "function"; )
          n = n();
        e = g(i, n, e, s);
      }), () => e;
    if (Array.isArray(t)) {
      const n = [], r = e && Array.isArray(e);
      if (w(n, t, e, o))
        return y(() => e = g(i, n, e, s, !0)), () => e;
      if (a.context) {
        if (!n.length)
          return e;
        for (let c = 0; c < n.length; c++)
          if (n[c].parentNode)
            return e = n;
      }
      if (n.length === 0) {
        if (e = h(i, e, s), f)
          return e;
      } else
        r ? e.length === 0 ? C(i, n, s) : q(i, e, n) : (e && h(i), C(i, n));
      e = n;
    } else if (t instanceof Node) {
      if (a.context && t.parentNode)
        return e = f ? [t] : t;
      if (Array.isArray(e)) {
        if (f)
          return e = h(i, e, s, t);
        h(i, e, null, t);
      } else
        e == null || e === "" || !i.firstChild ? i.appendChild(t) : i.replaceChild(t, i.firstChild);
      e = t;
    }
  }
  return e;
}
function w(i, t, e, s) {
  let o = !1;
  for (let l = 0, f = t.length; l < f; l++) {
    let n = t[l], r = e && e[l];
    if (n instanceof Node)
      i.push(n);
    else if (!(n == null || n === !0 || n === !1))
      if (Array.isArray(n))
        o = w(i, n, r) || o;
      else if (typeof n == "function")
        if (s) {
          for (; typeof n == "function"; )
            n = n();
          o = w(i, Array.isArray(n) ? n : [n], Array.isArray(r) ? r : [r]) || o;
        } else
          i.push(n), o = !0;
      else {
        const c = String(n);
        r && r.nodeType === 3 && r.data === c ? i.push(r) : i.push(document.createTextNode(c));
      }
  }
  return o;
}
function C(i, t, e = null) {
  for (let s = 0, o = t.length; s < o; s++)
    i.insertBefore(t[s], e);
}
function h(i, t, e, s) {
  if (e === void 0)
    return i.textContent = "";
  const o = s || document.createTextNode("");
  if (t.length) {
    let l = !1;
    for (let f = t.length - 1; f >= 0; f--) {
      const n = t[f];
      if (o !== n) {
        const r = n.parentNode === i;
        !l && !f ? r ? i.replaceChild(o, n) : i.insertBefore(o, e) : r && n.remove();
      } else
        l = !0;
    }
  } else
    i.insertBefore(o, e);
  return [o];
}
const z = /* @__PURE__ */ H("<div></div>"), ee = (i) => {
  const {
    autostart: t,
    options: e,
    children: s,
    ref: o,
    ...l
  } = T({
    autostart: !0
  }, i);
  let f, n;
  return P(() => {
    n = new M(f, e), t && n.start(), o && o(n), O(() => {
      n.stop();
    });
  }), (() => {
    const r = z.cloneNode(!0), c = f;
    return typeof c == "function" ? Q(c, r) : f = r, J(r, l, !1, !0), R(r, s), r;
  })();
};
export {
  ee as Fireworks,
  ee as default
};
